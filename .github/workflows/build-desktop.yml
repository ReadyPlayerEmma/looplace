name: Build (Desktop)

# Push/PR triggers are active; adjust matrix below to add more platforms when ready.
on:
  push:
    branches: [main]
  pull_request:

jobs:
  build:
    name: ${{ matrix.os }} â€¢ ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS bundle
          - os: macos-latest
            target: aarch64-apple-darwin
            bin: looplace-desktop
            archive: zip
          # Windows portable zip
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: looplace-desktop.exe
            archive: zip

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache cargo
        uses: Swatinem/rust-cache@v2

      - name: Build (release)
        run: cargo build --release -p looplace-desktop --features desktop --target ${{ matrix.target }}
        env:
          RUSTFLAGS: -C target-cpu=native

      - name: Package artifact (.app bundle)
        if: contains(matrix.target, 'apple')
        shell: bash
        run: |
          set -euo pipefail
          echo "Using unified macOS bundling script"
          RUST_TARGET="${{ matrix.target }}" \
          OUT_BASENAME="looplace-desktop-${{ matrix.target }}" \
          OUTPUT_DIR="dist" \
          SIGN_IDENTITY="-" \
          STRICT=1 \
          scripts/macos/bundle.sh
      - name: Compute checksum (macOS)
        if: contains(matrix.target, 'apple')
        shell: bash
        run: |
          shasum -a 256 dist/*.zip | tee dist/SHA256SUMS-${{ matrix.target }}.txt

      - name: Package artifact (Windows zip)
        if: contains(matrix.target, 'windows')
        shell: pwsh
        run: |
          $out = "looplace-desktop-${{ matrix.target }}"
          $build = "target/${{ matrix.target }}/release/${{ matrix.bin }}"
          if (-not (Test-Path $build)) {
            Write-Error "Desktop binary not found at $build"
          }
          $dest = Join-Path "dist" $out
          Remove-Item $dest -Recurse -Force -ErrorAction SilentlyContinue
          New-Item $dest -ItemType Directory | Out-Null
          Copy-Item $build (Join-Path $dest ${{ matrix.bin }})
          # UI assets (CSS/etc) embedded; no asset directory copy needed
          Rename-Item (Join-Path $dest ${{ matrix.bin }}) "Looplace.exe"
          Compress-Archive -Path $dest -DestinationPath (Join-Path "dist" "$out.zip") -Force
      - name: Compute checksum (Windows)
        if: contains(matrix.target, 'windows')
        shell: pwsh
        run: |
          Get-ChildItem dist -Filter *.zip | ForEach-Object {
            $h = Get-FileHash $_.FullName -Algorithm SHA256
            "$($h.Hash)  $($_.Name)"
          } | Tee-Object -FilePath (Join-Path dist "SHA256SUMS-${{ matrix.target }}.txt")

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: looplace-${{ matrix.target }}
          path: |
            dist/*.zip
            dist/SHA256SUMS-*.txt
